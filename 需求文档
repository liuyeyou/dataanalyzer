【数据分析 Agent 替换为 pandas-ai方案】
背景：
当前项目中的数据分析功能采用了传统的 Agent 思维链模式（如 LangChain AgentExecutor），每次分析问题会输出大量中间推理（Thought/Action/Observation），日志冗长，且不适合业务直接阅读。目标是用 pandas-ai 直接结合 GPT-4.1，实现如下能力：

支持直接用自然语言（中文/英文）提问，分析本地已加载的 DataFrame（df）

不再输出任何中间推理、代码片段、Action等，只输出最终分析结论

支持多轮对话/历史上下文（可选）

【请帮我做如下整体替换和升级：】
1. 核心功能实现
用 pandas-ai 的 SmartDataframe(df, ...) 构建数据分析对象，LLM 模型配置为 gemini 和Deepseek 也就是现在使用的这个不分）

直接调用 sdf.chat(用户问题) 或 sdf.chat(用户问题, chat_history=...) 进行自然语言数据分析

问题分析结果只需输出 AI 生成的精炼结论即可，不要包含任何 Thought/Action/Final Answer/代码执行过程

2. 代码结构参考
数据上传 & DataFrame 处理

python
Copy
Edit
uploaded_file = st.file_uploader("上传CSV数据文件", type=["csv"])
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
else:
    st.warning("请先上传数据文件")
    st.stop()
问题输入 & 分析按钮

python
Copy
Edit
question = st.text_input("请输入你的分析问题")
if st.button("分析") and question:
    from pandasai import SmartDataframe
    from pandasai.llm.openai import OpenAI  # 也可用别的 GPT-4.1 接口
    llm = OpenAI(api_token="YOUR_GPT4.1_KEY")
    sdf = SmartDataframe(df, config={"llm": llm, "enable_cache": False})
    answer = sdf.chat(question)  # 直接对 df 提问，返回最终答案
    st.markdown("#### AI分析结论：")
    st.markdown(answer)
多轮对话（如需支持，可选）

python
Copy
Edit
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# 展示历史对话
for q, a in st.session_state.chat_history:
    st.markdown(f"**用户:** {q}")
    st.markdown(f"**AI:** {a}")

if st.button("分析") and question:
    answer = sdf.chat(question, chat_history=[{"role": "user", "content": q} if i%2==0 else {"role": "assistant", "content": a} for i,(q,a) in enumerate(st.session_state.chat_history)])
    st.session_state.chat_history.append((question, answer))
    st.markdown(answer)
3. 删除/停用以下旧逻辑
删除或注释掉原有的 AgentExecutor、LangChain Agent、Thought/Action 等相关代码

前端只需展示最后的 AI 结论 markdown，无需显示任何中间代码/推理过程

4. LLM 配置说明
必须指定 Gemini 的 API key

如果有其它自研大模型、兼容 OpenAI API 协议，也可以直接适配

5. 测试/验收要点
AI分析回答中没有任何 Thought/Action/Final Answer/代码片段

每次对话结论都来源于本地 DataFrame（非样例/非 prompt 里的head）

支持直接自然语言问表格数据（如“哪天总收入最高”“本月波动最大是什么原因”）

如有多轮对话，历史问答能被上下文记忆并影响答案

请帮我按上述方案直接升级代码，实现效果。
如需更多信息请随时提问。

